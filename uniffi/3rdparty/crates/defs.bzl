###############################################################################
# @generated
# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To
# regenerate this file, run the following:
#
#     bazel run @@//uniffi/3rdparty:crates_vendor
###############################################################################
"""
# `crates_repository` API

- [aliases](#aliases)
- [crate_deps](#crate_deps)
- [all_crate_deps](#all_crate_deps)
- [crate_repositories](#crate_repositories)

"""

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

###############################################################################
# MACROS API
###############################################################################

# An identifier that represent common dependencies (unconditional).
_COMMON_CONDITION = ""

def _flatten_dependency_maps(all_dependency_maps):
    """Flatten a list of dependency maps into one dictionary.

    Dependency maps have the following structure:

    ```python
    DEPENDENCIES_MAP = {
        # The first key in the map is a Bazel package
        # name of the workspace this file is defined in.
        "workspace_member_package": {

            # Not all dependencies are supported for all platforms.
            # the condition key is the condition required to be true
            # on the host platform.
            "condition": {

                # An alias to a crate target.     # The label of the crate target the
                # Aliases are only crate names.   # package name refers to.
                "package_name":                   "@full//:label",
            }
        }
    }
    ```

    Args:
        all_dependency_maps (list): A list of dicts as described above

    Returns:
        dict: A dictionary as described above
    """
    dependencies = {}

    for workspace_deps_map in all_dependency_maps:
        for pkg_name, conditional_deps_map in workspace_deps_map.items():
            if pkg_name not in dependencies:
                non_frozen_map = dict()
                for key, values in conditional_deps_map.items():
                    non_frozen_map.update({key: dict(values.items())})
                dependencies.setdefault(pkg_name, non_frozen_map)
                continue

            for condition, deps_map in conditional_deps_map.items():
                # If the condition has not been recorded, do so and continue
                if condition not in dependencies[pkg_name]:
                    dependencies[pkg_name].setdefault(condition, dict(deps_map.items()))
                    continue

                # Alert on any miss-matched dependencies
                inconsistent_entries = []
                for crate_name, crate_label in deps_map.items():
                    existing = dependencies[pkg_name][condition].get(crate_name)
                    if existing and existing != crate_label:
                        inconsistent_entries.append((crate_name, existing, crate_label))
                    dependencies[pkg_name][condition].update({crate_name: crate_label})

    return dependencies

def crate_deps(deps, package_name = None):
    """Finds the fully qualified label of the requested crates for the package where this macro is called.

    Args:
        deps (list): The desired list of crate targets.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()`.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if not deps:
        return []

    if package_name == None:
        package_name = native.package_name()

    # Join both sets of dependencies
    dependencies = _flatten_dependency_maps([
        _NORMAL_DEPENDENCIES,
        _NORMAL_DEV_DEPENDENCIES,
        _PROC_MACRO_DEPENDENCIES,
        _PROC_MACRO_DEV_DEPENDENCIES,
        _BUILD_DEPENDENCIES,
        _BUILD_PROC_MACRO_DEPENDENCIES,
    ]).pop(package_name, {})

    # Combine all conditional packages so we can easily index over a flat list
    # TODO: Perhaps this should actually return select statements and maintain
    # the conditionals of the dependencies
    flat_deps = {}
    for deps_set in dependencies.values():
        for crate_name, crate_label in deps_set.items():
            flat_deps.update({crate_name: crate_label})

    missing_crates = []
    crate_targets = []
    for crate_target in deps:
        if crate_target not in flat_deps:
            missing_crates.append(crate_target)
        else:
            crate_targets.append(flat_deps[crate_target])

    if missing_crates:
        fail("Could not find crates `{}` among dependencies of `{}`. Available dependencies were `{}`".format(
            missing_crates,
            package_name,
            dependencies,
        ))

    return crate_targets

def all_crate_deps(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Finds the fully qualified label of all requested direct crate dependencies \
    for the package where this macro is called.

    If no parameters are set, all normal dependencies are returned. Setting any one flag will
    otherwise impact the contents of the returned list.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normal dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_dependency_maps = []
    if normal:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)
    if normal_dev:
        all_dependency_maps.append(_NORMAL_DEV_DEPENDENCIES)
    if proc_macro:
        all_dependency_maps.append(_PROC_MACRO_DEPENDENCIES)
    if proc_macro_dev:
        all_dependency_maps.append(_PROC_MACRO_DEV_DEPENDENCIES)
    if build:
        all_dependency_maps.append(_BUILD_DEPENDENCIES)
    if build_proc_macro:
        all_dependency_maps.append(_BUILD_PROC_MACRO_DEPENDENCIES)

    # Default to always using normal dependencies
    if not all_dependency_maps:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)

    dependencies = _flatten_dependency_maps(all_dependency_maps).pop(package_name, None)

    if not dependencies:
        if dependencies == None:
            fail("Tried to get all_crate_deps for package " + package_name + " but that package had no Cargo.toml file")
        else:
            return []

    crate_deps = list(dependencies.pop(_COMMON_CONDITION, {}).values())
    for condition, deps in dependencies.items():
        crate_deps += selects.with_or({
            tuple(_CONDITIONS[condition]): deps.values(),
            "//conditions:default": [],
        })

    return crate_deps

def aliases(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Produces a map of Crate alias names to their original label

    If no dependency kinds are specified, `normal` and `proc_macro` are used by default.
    Setting any one flag will otherwise determine the contents of the returned dict.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normal dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        dict: The aliases of all associated packages
    """
    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_aliases_maps = []
    if normal:
        all_aliases_maps.append(_NORMAL_ALIASES)
    if normal_dev:
        all_aliases_maps.append(_NORMAL_DEV_ALIASES)
    if proc_macro:
        all_aliases_maps.append(_PROC_MACRO_ALIASES)
    if proc_macro_dev:
        all_aliases_maps.append(_PROC_MACRO_DEV_ALIASES)
    if build:
        all_aliases_maps.append(_BUILD_ALIASES)
    if build_proc_macro:
        all_aliases_maps.append(_BUILD_PROC_MACRO_ALIASES)

    # Default to always using normal aliases
    if not all_aliases_maps:
        all_aliases_maps.append(_NORMAL_ALIASES)
        all_aliases_maps.append(_PROC_MACRO_ALIASES)

    aliases = _flatten_dependency_maps(all_aliases_maps).pop(package_name, None)

    if not aliases:
        return dict()

    common_items = aliases.pop(_COMMON_CONDITION, {}).items()

    # If there are only common items in the dictionary, immediately return them
    if not len(aliases.keys()) == 1:
        return dict(common_items)

    # Build a single select statement where each conditional has accounted for the
    # common set of aliases.
    crate_aliases = {"//conditions:default": dict(common_items)}
    for condition, deps in aliases.items():
        condition_triples = _CONDITIONS[condition]
        for triple in condition_triples:
            if triple in crate_aliases:
                crate_aliases[triple].update(deps)
            else:
                crate_aliases.update({triple: dict(deps.items() + common_items)})

    return select(crate_aliases)

###############################################################################
# WORKSPACE MEMBER DEPS AND ALIASES
###############################################################################

_NORMAL_DEPENDENCIES = {
    "uniffi/private/generate": {
        _COMMON_CONDITION: {
            "anyhow": Label("@id__anyhow-1.0.89//:anyhow"),
            "camino": Label("@id__camino-1.1.9//:camino"),
            "clap": Label("@id__clap-4.5.17//:clap"),
            "uniffi_bindgen": Label("@id__uniffi_bindgen-0.28.1//:uniffi_bindgen"),
            "uniffi_core": Label("@id__uniffi_core-0.28.1//:uniffi_core"),
        },
    },
}

_NORMAL_ALIASES = {
    "uniffi/private/generate": {
        _COMMON_CONDITION: {
        },
    },
}

_NORMAL_DEV_DEPENDENCIES = {
    "uniffi/private/generate": {
    },
}

_NORMAL_DEV_ALIASES = {
    "uniffi/private/generate": {
    },
}

_PROC_MACRO_DEPENDENCIES = {
    "uniffi/private/generate": {
        _COMMON_CONDITION: {
            "uniffi_macros": Label("@id__uniffi_macros-0.28.1//:uniffi_macros"),
        },
    },
}

_PROC_MACRO_ALIASES = {
    "uniffi/private/generate": {
    },
}

_PROC_MACRO_DEV_DEPENDENCIES = {
    "uniffi/private/generate": {
    },
}

_PROC_MACRO_DEV_ALIASES = {
    "uniffi/private/generate": {
    },
}

_BUILD_DEPENDENCIES = {
    "uniffi/private/generate": {
    },
}

_BUILD_ALIASES = {
    "uniffi/private/generate": {
    },
}

_BUILD_PROC_MACRO_DEPENDENCIES = {
    "uniffi/private/generate": {
    },
}

_BUILD_PROC_MACRO_ALIASES = {
    "uniffi/private/generate": {
    },
}

_CONDITIONS = {
    "aarch64-apple-darwin": ["@rules_rust//rust/platform:aarch64-apple-darwin"],
    "aarch64-apple-ios": ["@rules_rust//rust/platform:aarch64-apple-ios"],
    "aarch64-apple-ios-sim": ["@rules_rust//rust/platform:aarch64-apple-ios-sim"],
    "aarch64-fuchsia": ["@rules_rust//rust/platform:aarch64-fuchsia"],
    "aarch64-linux-android": ["@rules_rust//rust/platform:aarch64-linux-android"],
    "aarch64-pc-windows-gnullvm": [],
    "aarch64-pc-windows-msvc": ["@rules_rust//rust/platform:aarch64-pc-windows-msvc"],
    "aarch64-unknown-linux-gnu": ["@rules_rust//rust/platform:aarch64-unknown-linux-gnu"],
    "aarch64-unknown-nixos-gnu": ["@rules_rust//rust/platform:aarch64-unknown-nixos-gnu"],
    "aarch64-unknown-nto-qnx710": ["@rules_rust//rust/platform:aarch64-unknown-nto-qnx710"],
    "arm-unknown-linux-gnueabi": ["@rules_rust//rust/platform:arm-unknown-linux-gnueabi"],
    "armv7-linux-androideabi": ["@rules_rust//rust/platform:armv7-linux-androideabi"],
    "armv7-unknown-linux-gnueabi": ["@rules_rust//rust/platform:armv7-unknown-linux-gnueabi"],
    "cfg(all(any(target_arch = \"x86_64\", target_arch = \"arm64ec\"), target_env = \"msvc\", not(windows_raw_dylib)))": ["@rules_rust//rust/platform:x86_64-pc-windows-msvc"],
    "cfg(all(target_arch = \"aarch64\", target_env = \"msvc\", not(windows_raw_dylib)))": ["@rules_rust//rust/platform:aarch64-pc-windows-msvc"],
    "cfg(all(target_arch = \"x86\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))": ["@rules_rust//rust/platform:i686-unknown-linux-gnu"],
    "cfg(all(target_arch = \"x86\", target_env = \"msvc\", not(windows_raw_dylib)))": ["@rules_rust//rust/platform:i686-pc-windows-msvc"],
    "cfg(all(target_arch = \"x86_64\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))": ["@rules_rust//rust/platform:x86_64-unknown-linux-gnu", "@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "cfg(windows)": ["@rules_rust//rust/platform:aarch64-pc-windows-msvc", "@rules_rust//rust/platform:i686-pc-windows-msvc", "@rules_rust//rust/platform:x86_64-pc-windows-msvc"],
    "i686-apple-darwin": ["@rules_rust//rust/platform:i686-apple-darwin"],
    "i686-linux-android": ["@rules_rust//rust/platform:i686-linux-android"],
    "i686-pc-windows-gnullvm": [],
    "i686-pc-windows-msvc": ["@rules_rust//rust/platform:i686-pc-windows-msvc"],
    "i686-unknown-freebsd": ["@rules_rust//rust/platform:i686-unknown-freebsd"],
    "i686-unknown-linux-gnu": ["@rules_rust//rust/platform:i686-unknown-linux-gnu"],
    "powerpc-unknown-linux-gnu": ["@rules_rust//rust/platform:powerpc-unknown-linux-gnu"],
    "riscv32imc-unknown-none-elf": ["@rules_rust//rust/platform:riscv32imc-unknown-none-elf"],
    "riscv64gc-unknown-none-elf": ["@rules_rust//rust/platform:riscv64gc-unknown-none-elf"],
    "s390x-unknown-linux-gnu": ["@rules_rust//rust/platform:s390x-unknown-linux-gnu"],
    "thumbv7em-none-eabi": ["@rules_rust//rust/platform:thumbv7em-none-eabi"],
    "thumbv8m.main-none-eabi": ["@rules_rust//rust/platform:thumbv8m.main-none-eabi"],
    "wasm32-unknown-unknown": ["@rules_rust//rust/platform:wasm32-unknown-unknown"],
    "wasm32-wasi": ["@rules_rust//rust/platform:wasm32-wasi"],
    "x86_64-apple-darwin": ["@rules_rust//rust/platform:x86_64-apple-darwin"],
    "x86_64-apple-ios": ["@rules_rust//rust/platform:x86_64-apple-ios"],
    "x86_64-fuchsia": ["@rules_rust//rust/platform:x86_64-fuchsia"],
    "x86_64-linux-android": ["@rules_rust//rust/platform:x86_64-linux-android"],
    "x86_64-pc-windows-gnullvm": [],
    "x86_64-pc-windows-msvc": ["@rules_rust//rust/platform:x86_64-pc-windows-msvc"],
    "x86_64-unknown-freebsd": ["@rules_rust//rust/platform:x86_64-unknown-freebsd"],
    "x86_64-unknown-linux-gnu": ["@rules_rust//rust/platform:x86_64-unknown-linux-gnu"],
    "x86_64-unknown-nixos-gnu": ["@rules_rust//rust/platform:x86_64-unknown-nixos-gnu"],
    "x86_64-unknown-none": ["@rules_rust//rust/platform:x86_64-unknown-none"],
}

###############################################################################

def crate_repositories():
    """A macro for defining repositories for all generated crates.

    Returns:
      A list of repos visible to the module through the module extension.
    """
    maybe(
        http_archive,
        name = "id__anstream-0.6.15",
        sha256 = "64e15c1ab1f89faffbf04a634d5e1962e9074f2741eef6d97f3c4e322426d526",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstream/0.6.15/download"],
        strip_prefix = "anstream-0.6.15",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.anstream-0.6.15.bazel"),
    )

    maybe(
        http_archive,
        name = "id__anstyle-1.0.8",
        sha256 = "1bec1de6f59aedf83baf9ff929c98f2ad654b97c9510f4e70cf6f661d49fd5b1",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstyle/1.0.8/download"],
        strip_prefix = "anstyle-1.0.8",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.anstyle-1.0.8.bazel"),
    )

    maybe(
        http_archive,
        name = "id__anstyle-parse-0.2.5",
        sha256 = "eb47de1e80c2b463c735db5b217a0ddc39d612e7ac9e2e96a5aed1f57616c1cb",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstyle-parse/0.2.5/download"],
        strip_prefix = "anstyle-parse-0.2.5",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.anstyle-parse-0.2.5.bazel"),
    )

    maybe(
        http_archive,
        name = "id__anstyle-query-1.1.1",
        sha256 = "6d36fc52c7f6c869915e99412912f22093507da8d9e942ceaf66fe4b7c14422a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstyle-query/1.1.1/download"],
        strip_prefix = "anstyle-query-1.1.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.anstyle-query-1.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__anstyle-wincon-3.0.4",
        sha256 = "5bf74e1b6e971609db8ca7a9ce79fd5768ab6ae46441c572e46cf596f59e57f8",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anstyle-wincon/3.0.4/download"],
        strip_prefix = "anstyle-wincon-3.0.4",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.anstyle-wincon-3.0.4.bazel"),
    )

    maybe(
        http_archive,
        name = "id__anyhow-1.0.89",
        sha256 = "86fdf8605db99b54d3cd748a44c6d04df638eb5dafb219b135d0149bd0db01f6",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/anyhow/1.0.89/download"],
        strip_prefix = "anyhow-1.0.89",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.anyhow-1.0.89.bazel"),
    )

    maybe(
        http_archive,
        name = "id__askama-0.12.1",
        sha256 = "b79091df18a97caea757e28cd2d5fda49c6cd4bd01ddffd7ff01ace0c0ad2c28",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/askama/0.12.1/download"],
        strip_prefix = "askama-0.12.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.askama-0.12.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__askama_derive-0.12.5",
        sha256 = "19fe8d6cb13c4714962c072ea496f3392015f0989b1a2847bb4b2d9effd71d83",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/askama_derive/0.12.5/download"],
        strip_prefix = "askama_derive-0.12.5",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.askama_derive-0.12.5.bazel"),
    )

    maybe(
        http_archive,
        name = "id__askama_escape-0.10.3",
        sha256 = "619743e34b5ba4e9703bba34deac3427c72507c7159f5fd030aea8cac0cfe341",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/askama_escape/0.10.3/download"],
        strip_prefix = "askama_escape-0.10.3",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.askama_escape-0.10.3.bazel"),
    )

    maybe(
        http_archive,
        name = "id__askama_parser-0.2.1",
        sha256 = "acb1161c6b64d1c3d83108213c2a2533a342ac225aabd0bda218278c2ddb00c0",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/askama_parser/0.2.1/download"],
        strip_prefix = "askama_parser-0.2.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.askama_parser-0.2.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__autocfg-1.3.0",
        sha256 = "0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/autocfg/1.3.0/download"],
        strip_prefix = "autocfg-1.3.0",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.autocfg-1.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__basic-toml-0.1.9",
        sha256 = "823388e228f614e9558c6804262db37960ec8821856535f5c3f59913140558f8",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/basic-toml/0.1.9/download"],
        strip_prefix = "basic-toml-0.1.9",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.basic-toml-0.1.9.bazel"),
    )

    maybe(
        http_archive,
        name = "id__bincode-1.3.3",
        sha256 = "b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/bincode/1.3.3/download"],
        strip_prefix = "bincode-1.3.3",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.bincode-1.3.3.bazel"),
    )

    maybe(
        http_archive,
        name = "id__bytes-1.7.1",
        sha256 = "8318a53db07bb3f8dca91a600466bdb3f2eaadeedfdbcf02e1accbad9271ba50",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/bytes/1.7.1/download"],
        strip_prefix = "bytes-1.7.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.bytes-1.7.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__camino-1.1.9",
        sha256 = "8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/camino/1.1.9/download"],
        strip_prefix = "camino-1.1.9",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.camino-1.1.9.bazel"),
    )

    maybe(
        http_archive,
        name = "id__cargo-platform-0.1.8",
        sha256 = "24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/cargo-platform/0.1.8/download"],
        strip_prefix = "cargo-platform-0.1.8",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.cargo-platform-0.1.8.bazel"),
    )

    maybe(
        http_archive,
        name = "id__cargo_metadata-0.15.4",
        sha256 = "eee4243f1f26fc7a42710e7439c149e2b10b05472f88090acce52632f231a73a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/cargo_metadata/0.15.4/download"],
        strip_prefix = "cargo_metadata-0.15.4",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.cargo_metadata-0.15.4.bazel"),
    )

    maybe(
        http_archive,
        name = "id__clap-4.5.17",
        sha256 = "3e5a21b8495e732f1b3c364c9949b201ca7bae518c502c80256c96ad79eaf6ac",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/clap/4.5.17/download"],
        strip_prefix = "clap-4.5.17",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.clap-4.5.17.bazel"),
    )

    maybe(
        http_archive,
        name = "id__clap_builder-4.5.17",
        sha256 = "8cf2dd12af7a047ad9d6da2b6b249759a22a7abc0f474c1dae1777afa4b21a73",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/clap_builder/4.5.17/download"],
        strip_prefix = "clap_builder-4.5.17",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.clap_builder-4.5.17.bazel"),
    )

    maybe(
        http_archive,
        name = "id__clap_derive-4.5.13",
        sha256 = "501d359d5f3dcaf6ecdeee48833ae73ec6e42723a1e52419c79abf9507eec0a0",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/clap_derive/4.5.13/download"],
        strip_prefix = "clap_derive-4.5.13",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.clap_derive-4.5.13.bazel"),
    )

    maybe(
        http_archive,
        name = "id__clap_lex-0.7.2",
        sha256 = "1462739cb27611015575c0c11df5df7601141071f07518d56fcc1be504cbec97",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/clap_lex/0.7.2/download"],
        strip_prefix = "clap_lex-0.7.2",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.clap_lex-0.7.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__colorchoice-1.0.2",
        sha256 = "d3fd119d74b830634cea2a0f58bbd0d54540518a14397557951e79340abc28c0",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/colorchoice/1.0.2/download"],
        strip_prefix = "colorchoice-1.0.2",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.colorchoice-1.0.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__fs-err-2.11.0",
        sha256 = "88a41f105fe1d5b6b34b2055e3dc59bb79b46b48b2040b9e6c7b4b5de097aa41",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/fs-err/2.11.0/download"],
        strip_prefix = "fs-err-2.11.0",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.fs-err-2.11.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__glob-0.3.1",
        sha256 = "d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/glob/0.3.1/download"],
        strip_prefix = "glob-0.3.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.glob-0.3.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__goblin-0.8.2",
        sha256 = "1b363a30c165f666402fe6a3024d3bec7ebc898f96a4a23bd1c99f8dbf3f4f47",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/goblin/0.8.2/download"],
        strip_prefix = "goblin-0.8.2",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.goblin-0.8.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__heck-0.5.0",
        sha256 = "2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/heck/0.5.0/download"],
        strip_prefix = "heck-0.5.0",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.heck-0.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__is_terminal_polyfill-1.70.1",
        sha256 = "7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/is_terminal_polyfill/1.70.1/download"],
        strip_prefix = "is_terminal_polyfill-1.70.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.is_terminal_polyfill-1.70.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__itoa-1.0.11",
        sha256 = "49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/itoa/1.0.11/download"],
        strip_prefix = "itoa-1.0.11",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.itoa-1.0.11.bazel"),
    )

    maybe(
        http_archive,
        name = "id__log-0.4.22",
        sha256 = "a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/log/0.4.22/download"],
        strip_prefix = "log-0.4.22",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.log-0.4.22.bazel"),
    )

    maybe(
        http_archive,
        name = "id__memchr-2.7.4",
        sha256 = "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/memchr/2.7.4/download"],
        strip_prefix = "memchr-2.7.4",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.memchr-2.7.4.bazel"),
    )

    maybe(
        http_archive,
        name = "id__mime-0.3.17",
        sha256 = "6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/mime/0.3.17/download"],
        strip_prefix = "mime-0.3.17",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.mime-0.3.17.bazel"),
    )

    maybe(
        http_archive,
        name = "id__mime_guess-2.0.5",
        sha256 = "f7c44f8e672c00fe5308fa235f821cb4198414e1c77935c1ab6948d3fd78550e",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/mime_guess/2.0.5/download"],
        strip_prefix = "mime_guess-2.0.5",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.mime_guess-2.0.5.bazel"),
    )

    maybe(
        http_archive,
        name = "id__minimal-lexical-0.2.1",
        sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/minimal-lexical/0.2.1/download"],
        strip_prefix = "minimal-lexical-0.2.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.minimal-lexical-0.2.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__nom-7.1.3",
        sha256 = "d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/nom/7.1.3/download"],
        strip_prefix = "nom-7.1.3",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.nom-7.1.3.bazel"),
    )

    maybe(
        http_archive,
        name = "id__once_cell-1.20.0",
        sha256 = "33ea5043e58958ee56f3e15a90aee535795cd7dfd319846288d93c5b57d85cbe",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/once_cell/1.20.0/download"],
        strip_prefix = "once_cell-1.20.0",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.once_cell-1.20.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__paste-1.0.15",
        sha256 = "57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/paste/1.0.15/download"],
        strip_prefix = "paste-1.0.15",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.paste-1.0.15.bazel"),
    )

    maybe(
        http_archive,
        name = "id__plain-0.2.3",
        sha256 = "b4596b6d070b27117e987119b4dac604f3c58cfb0b191112e24771b2faeac1a6",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/plain/0.2.3/download"],
        strip_prefix = "plain-0.2.3",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.plain-0.2.3.bazel"),
    )

    maybe(
        http_archive,
        name = "id__proc-macro2-1.0.86",
        sha256 = "5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/proc-macro2/1.0.86/download"],
        strip_prefix = "proc-macro2-1.0.86",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.proc-macro2-1.0.86.bazel"),
    )

    maybe(
        http_archive,
        name = "id__quote-1.0.37",
        sha256 = "b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/quote/1.0.37/download"],
        strip_prefix = "quote-1.0.37",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.quote-1.0.37.bazel"),
    )

    maybe(
        http_archive,
        name = "id__ryu-1.0.18",
        sha256 = "f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/ryu/1.0.18/download"],
        strip_prefix = "ryu-1.0.18",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.ryu-1.0.18.bazel"),
    )

    maybe(
        http_archive,
        name = "id__scroll-0.12.0",
        sha256 = "6ab8598aa408498679922eff7fa985c25d58a90771bd6be794434c5277eab1a6",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/scroll/0.12.0/download"],
        strip_prefix = "scroll-0.12.0",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.scroll-0.12.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__scroll_derive-0.12.0",
        sha256 = "7f81c2fde025af7e69b1d1420531c8a8811ca898919db177141a85313b1cb932",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/scroll_derive/0.12.0/download"],
        strip_prefix = "scroll_derive-0.12.0",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.scroll_derive-0.12.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__semver-1.0.23",
        sha256 = "61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/semver/1.0.23/download"],
        strip_prefix = "semver-1.0.23",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.semver-1.0.23.bazel"),
    )

    maybe(
        http_archive,
        name = "id__serde-1.0.210",
        sha256 = "c8e3592472072e6e22e0a54d5904d9febf8508f65fb8552499a1abc7d1078c3a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/serde/1.0.210/download"],
        strip_prefix = "serde-1.0.210",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.serde-1.0.210.bazel"),
    )

    maybe(
        http_archive,
        name = "id__serde_derive-1.0.210",
        sha256 = "243902eda00fad750862fc144cea25caca5e20d615af0a81bee94ca738f1df1f",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/serde_derive/1.0.210/download"],
        strip_prefix = "serde_derive-1.0.210",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.serde_derive-1.0.210.bazel"),
    )

    maybe(
        http_archive,
        name = "id__serde_json-1.0.128",
        sha256 = "6ff5456707a1de34e7e37f2a6fd3d3f808c318259cbd01ab6377795054b483d8",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/serde_json/1.0.128/download"],
        strip_prefix = "serde_json-1.0.128",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.serde_json-1.0.128.bazel"),
    )

    maybe(
        http_archive,
        name = "id__siphasher-0.3.11",
        sha256 = "38b58827f4464d87d377d175e90bf58eb00fd8716ff0a62f80356b5e61555d0d",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/siphasher/0.3.11/download"],
        strip_prefix = "siphasher-0.3.11",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.siphasher-0.3.11.bazel"),
    )

    maybe(
        http_archive,
        name = "id__smawk-0.3.2",
        sha256 = "b7c388c1b5e93756d0c740965c41e8822f866621d41acbdf6336a6a168f8840c",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/smawk/0.3.2/download"],
        strip_prefix = "smawk-0.3.2",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.smawk-0.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__static_assertions-1.1.0",
        sha256 = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/static_assertions/1.1.0/download"],
        strip_prefix = "static_assertions-1.1.0",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.static_assertions-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__strsim-0.11.1",
        sha256 = "7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/strsim/0.11.1/download"],
        strip_prefix = "strsim-0.11.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.strsim-0.11.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__syn-2.0.77",
        sha256 = "9f35bcdf61fd8e7be6caf75f429fdca8beb3ed76584befb503b1569faee373ed",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/syn/2.0.77/download"],
        strip_prefix = "syn-2.0.77",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.syn-2.0.77.bazel"),
    )

    maybe(
        http_archive,
        name = "id__textwrap-0.16.1",
        sha256 = "23d434d3f8967a09480fb04132ebe0a3e088c173e6d0ee7897abbdf4eab0f8b9",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/textwrap/0.16.1/download"],
        strip_prefix = "textwrap-0.16.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.textwrap-0.16.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__thiserror-1.0.63",
        sha256 = "c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/thiserror/1.0.63/download"],
        strip_prefix = "thiserror-1.0.63",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.thiserror-1.0.63.bazel"),
    )

    maybe(
        http_archive,
        name = "id__thiserror-impl-1.0.63",
        sha256 = "a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/thiserror-impl/1.0.63/download"],
        strip_prefix = "thiserror-impl-1.0.63",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.thiserror-impl-1.0.63.bazel"),
    )

    maybe(
        http_archive,
        name = "id__toml-0.5.11",
        sha256 = "f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/toml/0.5.11/download"],
        strip_prefix = "toml-0.5.11",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.toml-0.5.11.bazel"),
    )

    maybe(
        http_archive,
        name = "id__unicase-2.7.0",
        sha256 = "f7d2d4dafb69621809a81864c9c1b864479e1235c0dd4e199924b9742439ed89",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/unicase/2.7.0/download"],
        strip_prefix = "unicase-2.7.0",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.unicase-2.7.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__unicode-ident-1.0.13",
        sha256 = "e91b56cd4cadaeb79bbf1a5645f6b4f8dc5bde8834ad5894a8db35fda9efa1fe",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/unicode-ident/1.0.13/download"],
        strip_prefix = "unicode-ident-1.0.13",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.unicode-ident-1.0.13.bazel"),
    )

    maybe(
        http_archive,
        name = "id__uniffi_bindgen-0.28.1",
        sha256 = "7a112599c9556d1581e4a3d72019a74c2c3e122cc27f4af12577a429c4d5e614",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/uniffi_bindgen/0.28.1/download"],
        strip_prefix = "uniffi_bindgen-0.28.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.uniffi_bindgen-0.28.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__uniffi_checksum_derive-0.28.1",
        sha256 = "a22dbe67c1c957ac6e7611bdf605a6218aa86b0eebeb8be58b70ae85ad7d73dc",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/uniffi_checksum_derive/0.28.1/download"],
        strip_prefix = "uniffi_checksum_derive-0.28.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.uniffi_checksum_derive-0.28.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__uniffi_core-0.28.1",
        sha256 = "5a0c35aaad30e3a9e6d4fe34e358d64dbc92ee09045b48591b05fc9f12e0905b",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/uniffi_core/0.28.1/download"],
        strip_prefix = "uniffi_core-0.28.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.uniffi_core-0.28.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__uniffi_macros-0.28.1",
        sha256 = "db66474c5c61b0f7afc3b4995fecf9b72b340daa5ca0ef3da7778d75eb5482ea",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/uniffi_macros/0.28.1/download"],
        strip_prefix = "uniffi_macros-0.28.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.uniffi_macros-0.28.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__uniffi_meta-0.28.1",
        sha256 = "d898893f102e0e39b8bcb7e3d2188f4156ba280db32db9e8af1f122d057e9526",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/uniffi_meta/0.28.1/download"],
        strip_prefix = "uniffi_meta-0.28.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.uniffi_meta-0.28.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__uniffi_testing-0.28.1",
        sha256 = "2c6aa4f0cf9d12172d84fc00a35a6c1f3522b526daad05ae739f709f6941b9b6",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/uniffi_testing/0.28.1/download"],
        strip_prefix = "uniffi_testing-0.28.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.uniffi_testing-0.28.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__uniffi_udl-0.28.1",
        sha256 = "6b044e9c519e0bb51e516ab6f6d8f4f4dcf900ce30d5ad07c03f924e2824f28e",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/uniffi_udl/0.28.1/download"],
        strip_prefix = "uniffi_udl-0.28.1",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.uniffi_udl-0.28.1.bazel"),
    )

    maybe(
        http_archive,
        name = "id__utf8parse-0.2.2",
        sha256 = "06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/utf8parse/0.2.2/download"],
        strip_prefix = "utf8parse-0.2.2",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.utf8parse-0.2.2.bazel"),
    )

    maybe(
        http_archive,
        name = "id__version_check-0.9.5",
        sha256 = "0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/version_check/0.9.5/download"],
        strip_prefix = "version_check-0.9.5",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.version_check-0.9.5.bazel"),
    )

    maybe(
        http_archive,
        name = "id__weedle2-5.0.0",
        sha256 = "998d2c24ec099a87daf9467808859f9d82b61f1d9c9701251aea037f514eae0e",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/weedle2/5.0.0/download"],
        strip_prefix = "weedle2-5.0.0",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.weedle2-5.0.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows-sys-0.52.0",
        sha256 = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows-sys/0.52.0/download"],
        strip_prefix = "windows-sys-0.52.0",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.windows-sys-0.52.0.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows-targets-0.52.6",
        sha256 = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows-targets/0.52.6/download"],
        strip_prefix = "windows-targets-0.52.6",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.windows-targets-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_aarch64_gnullvm-0.52.6",
        sha256 = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_aarch64_gnullvm/0.52.6/download"],
        strip_prefix = "windows_aarch64_gnullvm-0.52.6",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.windows_aarch64_gnullvm-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_aarch64_msvc-0.52.6",
        sha256 = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_aarch64_msvc/0.52.6/download"],
        strip_prefix = "windows_aarch64_msvc-0.52.6",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.windows_aarch64_msvc-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_i686_gnu-0.52.6",
        sha256 = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_i686_gnu/0.52.6/download"],
        strip_prefix = "windows_i686_gnu-0.52.6",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.windows_i686_gnu-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_i686_gnullvm-0.52.6",
        sha256 = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_i686_gnullvm/0.52.6/download"],
        strip_prefix = "windows_i686_gnullvm-0.52.6",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.windows_i686_gnullvm-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_i686_msvc-0.52.6",
        sha256 = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_i686_msvc/0.52.6/download"],
        strip_prefix = "windows_i686_msvc-0.52.6",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.windows_i686_msvc-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_x86_64_gnu-0.52.6",
        sha256 = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_x86_64_gnu/0.52.6/download"],
        strip_prefix = "windows_x86_64_gnu-0.52.6",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.windows_x86_64_gnu-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_x86_64_gnullvm-0.52.6",
        sha256 = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_x86_64_gnullvm/0.52.6/download"],
        strip_prefix = "windows_x86_64_gnullvm-0.52.6",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.windows_x86_64_gnullvm-0.52.6.bazel"),
    )

    maybe(
        http_archive,
        name = "id__windows_x86_64_msvc-0.52.6",
        sha256 = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec",
        type = "tar.gz",
        urls = ["https://static.crates.io/crates/windows_x86_64_msvc/0.52.6/download"],
        strip_prefix = "windows_x86_64_msvc-0.52.6",
        build_file = Label("//uniffi/3rdparty/crates:BUILD.windows_x86_64_msvc-0.52.6.bazel"),
    )

    return [
        struct(repo = "id__anyhow-1.0.89", is_dev_dep = False),
        struct(repo = "id__camino-1.1.9", is_dev_dep = False),
        struct(repo = "id__clap-4.5.17", is_dev_dep = False),
        struct(repo = "id__uniffi_bindgen-0.28.1", is_dev_dep = False),
        struct(repo = "id__uniffi_core-0.28.1", is_dev_dep = False),
        struct(repo = "id__uniffi_macros-0.28.1", is_dev_dep = False),
    ]
